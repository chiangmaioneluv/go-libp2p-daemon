// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.3
// source: p2pd.proto

package p2pd_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request_Type int32

const (
	Request_IDENTIFY                Request_Type = 0
	Request_CONNECT                 Request_Type = 1
	Request_STREAM_OPEN             Request_Type = 2
	Request_STREAM_HANDLER          Request_Type = 3
	Request_REMOVE_STREAM_HANDLER   Request_Type = 10
	Request_DHT                     Request_Type = 4
	Request_LIST_PEERS              Request_Type = 5
	Request_CONNMANAGER             Request_Type = 6
	Request_DISCONNECT              Request_Type = 7
	Request_PUBSUB                  Request_Type = 8
	Request_PERSISTENT_CONN_UPGRADE Request_Type = 9
	Request_BANDWIDTH_INFO          Request_Type = 11
)

// Enum value maps for Request_Type.
var (
	Request_Type_name = map[int32]string{
		0:  "IDENTIFY",
		1:  "CONNECT",
		2:  "STREAM_OPEN",
		3:  "STREAM_HANDLER",
		10: "REMOVE_STREAM_HANDLER",
		4:  "DHT",
		5:  "LIST_PEERS",
		6:  "CONNMANAGER",
		7:  "DISCONNECT",
		8:  "PUBSUB",
		9:  "PERSISTENT_CONN_UPGRADE",
		11: "BANDWIDTH_INFO",
	}
	Request_Type_value = map[string]int32{
		"IDENTIFY":                0,
		"CONNECT":                 1,
		"STREAM_OPEN":             2,
		"STREAM_HANDLER":          3,
		"REMOVE_STREAM_HANDLER":   10,
		"DHT":                     4,
		"LIST_PEERS":              5,
		"CONNMANAGER":             6,
		"DISCONNECT":              7,
		"PUBSUB":                  8,
		"PERSISTENT_CONN_UPGRADE": 9,
		"BANDWIDTH_INFO":          11,
	}
)

func (x Request_Type) Enum() *Request_Type {
	p := new(Request_Type)
	*p = x
	return p
}

func (x Request_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Request_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[0].Descriptor()
}

func (Request_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[0]
}

func (x Request_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Request_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Request_Type(num)
	return nil
}

// Deprecated: Use Request_Type.Descriptor instead.
func (Request_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{0, 0}
}

type Response_Type int32

const (
	Response_OK    Response_Type = 0
	Response_ERROR Response_Type = 1
)

// Enum value maps for Response_Type.
var (
	Response_Type_name = map[int32]string{
		0: "OK",
		1: "ERROR",
	}
	Response_Type_value = map[string]int32{
		"OK":    0,
		"ERROR": 1,
	}
)

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[1].Descriptor()
}

func (Response_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[1]
}

func (x Response_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Response_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Response_Type(num)
	return nil
}

// Deprecated: Use Response_Type.Descriptor instead.
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{1, 0}
}

type DHTRequest_Type int32

const (
	DHTRequest_FIND_PEER                    DHTRequest_Type = 0
	DHTRequest_FIND_PEERS_CONNECTED_TO_PEER DHTRequest_Type = 1
	DHTRequest_FIND_PROVIDERS               DHTRequest_Type = 2
	DHTRequest_GET_CLOSEST_PEERS            DHTRequest_Type = 3
	DHTRequest_GET_PUBLIC_KEY               DHTRequest_Type = 4
	DHTRequest_GET_VALUE                    DHTRequest_Type = 5
	DHTRequest_SEARCH_VALUE                 DHTRequest_Type = 6
	DHTRequest_PUT_VALUE                    DHTRequest_Type = 7
	DHTRequest_PROVIDE                      DHTRequest_Type = 8
)

// Enum value maps for DHTRequest_Type.
var (
	DHTRequest_Type_name = map[int32]string{
		0: "FIND_PEER",
		1: "FIND_PEERS_CONNECTED_TO_PEER",
		2: "FIND_PROVIDERS",
		3: "GET_CLOSEST_PEERS",
		4: "GET_PUBLIC_KEY",
		5: "GET_VALUE",
		6: "SEARCH_VALUE",
		7: "PUT_VALUE",
		8: "PROVIDE",
	}
	DHTRequest_Type_value = map[string]int32{
		"FIND_PEER":                    0,
		"FIND_PEERS_CONNECTED_TO_PEER": 1,
		"FIND_PROVIDERS":               2,
		"GET_CLOSEST_PEERS":            3,
		"GET_PUBLIC_KEY":               4,
		"GET_VALUE":                    5,
		"SEARCH_VALUE":                 6,
		"PUT_VALUE":                    7,
		"PROVIDE":                      8,
	}
)

func (x DHTRequest_Type) Enum() *DHTRequest_Type {
	p := new(DHTRequest_Type)
	*p = x
	return p
}

func (x DHTRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHTRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[2].Descriptor()
}

func (DHTRequest_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[2]
}

func (x DHTRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DHTRequest_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DHTRequest_Type(num)
	return nil
}

// Deprecated: Use DHTRequest_Type.Descriptor instead.
func (DHTRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{12, 0}
}

type DHTResponse_Type int32

const (
	DHTResponse_BEGIN DHTResponse_Type = 0
	DHTResponse_VALUE DHTResponse_Type = 1
	DHTResponse_END   DHTResponse_Type = 2
)

// Enum value maps for DHTResponse_Type.
var (
	DHTResponse_Type_name = map[int32]string{
		0: "BEGIN",
		1: "VALUE",
		2: "END",
	}
	DHTResponse_Type_value = map[string]int32{
		"BEGIN": 0,
		"VALUE": 1,
		"END":   2,
	}
)

func (x DHTResponse_Type) Enum() *DHTResponse_Type {
	p := new(DHTResponse_Type)
	*p = x
	return p
}

func (x DHTResponse_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHTResponse_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[3].Descriptor()
}

func (DHTResponse_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[3]
}

func (x DHTResponse_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DHTResponse_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DHTResponse_Type(num)
	return nil
}

// Deprecated: Use DHTResponse_Type.Descriptor instead.
func (DHTResponse_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{13, 0}
}

type ConnManagerRequest_Type int32

const (
	ConnManagerRequest_TAG_PEER   ConnManagerRequest_Type = 0
	ConnManagerRequest_UNTAG_PEER ConnManagerRequest_Type = 1
	ConnManagerRequest_TRIM       ConnManagerRequest_Type = 2
)

// Enum value maps for ConnManagerRequest_Type.
var (
	ConnManagerRequest_Type_name = map[int32]string{
		0: "TAG_PEER",
		1: "UNTAG_PEER",
		2: "TRIM",
	}
	ConnManagerRequest_Type_value = map[string]int32{
		"TAG_PEER":   0,
		"UNTAG_PEER": 1,
		"TRIM":       2,
	}
)

func (x ConnManagerRequest_Type) Enum() *ConnManagerRequest_Type {
	p := new(ConnManagerRequest_Type)
	*p = x
	return p
}

func (x ConnManagerRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnManagerRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[4].Descriptor()
}

func (ConnManagerRequest_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[4]
}

func (x ConnManagerRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnManagerRequest_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnManagerRequest_Type(num)
	return nil
}

// Deprecated: Use ConnManagerRequest_Type.Descriptor instead.
func (ConnManagerRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{15, 0}
}

type PSRequest_Type int32

const (
	PSRequest_GET_TOPICS PSRequest_Type = 0
	PSRequest_LIST_PEERS PSRequest_Type = 1
	PSRequest_PUBLISH    PSRequest_Type = 2
	PSRequest_SUBSCRIBE  PSRequest_Type = 3
)

// Enum value maps for PSRequest_Type.
var (
	PSRequest_Type_name = map[int32]string{
		0: "GET_TOPICS",
		1: "LIST_PEERS",
		2: "PUBLISH",
		3: "SUBSCRIBE",
	}
	PSRequest_Type_value = map[string]int32{
		"GET_TOPICS": 0,
		"LIST_PEERS": 1,
		"PUBLISH":    2,
		"SUBSCRIBE":  3,
	}
)

func (x PSRequest_Type) Enum() *PSRequest_Type {
	p := new(PSRequest_Type)
	*p = x
	return p
}

func (x PSRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PSRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_p2pd_proto_enumTypes[5].Descriptor()
}

func (PSRequest_Type) Type() protoreflect.EnumType {
	return &file_p2pd_proto_enumTypes[5]
}

func (x PSRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PSRequest_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PSRequest_Type(num)
	return nil
}

// Deprecated: Use PSRequest_Type.Descriptor instead.
func (PSRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{17, 0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                *Request_Type               `protobuf:"varint,1,req,name=type,enum=p2pd.pb.Request_Type" json:"type,omitempty"`
	Connect             *ConnectRequest             `protobuf:"bytes,2,opt,name=connect" json:"connect,omitempty"`
	StreamOpen          *StreamOpenRequest          `protobuf:"bytes,3,opt,name=streamOpen" json:"streamOpen,omitempty"`
	StreamHandler       *StreamHandlerRequest       `protobuf:"bytes,4,opt,name=streamHandler" json:"streamHandler,omitempty"`
	RemoveStreamHandler *RemoveStreamHandlerRequest `protobuf:"bytes,9,opt,name=removeStreamHandler" json:"removeStreamHandler,omitempty"`
	Dht                 *DHTRequest                 `protobuf:"bytes,5,opt,name=dht" json:"dht,omitempty"`
	ConnManager         *ConnManagerRequest         `protobuf:"bytes,6,opt,name=connManager" json:"connManager,omitempty"`
	Disconnect          *DisconnectRequest          `protobuf:"bytes,7,opt,name=disconnect" json:"disconnect,omitempty"`
	Pubsub              *PSRequest                  `protobuf:"bytes,8,opt,name=pubsub" json:"pubsub,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetType() Request_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Request_IDENTIFY
}

func (x *Request) GetConnect() *ConnectRequest {
	if x != nil {
		return x.Connect
	}
	return nil
}

func (x *Request) GetStreamOpen() *StreamOpenRequest {
	if x != nil {
		return x.StreamOpen
	}
	return nil
}

func (x *Request) GetStreamHandler() *StreamHandlerRequest {
	if x != nil {
		return x.StreamHandler
	}
	return nil
}

func (x *Request) GetRemoveStreamHandler() *RemoveStreamHandlerRequest {
	if x != nil {
		return x.RemoveStreamHandler
	}
	return nil
}

func (x *Request) GetDht() *DHTRequest {
	if x != nil {
		return x.Dht
	}
	return nil
}

func (x *Request) GetConnManager() *ConnManagerRequest {
	if x != nil {
		return x.ConnManager
	}
	return nil
}

func (x *Request) GetDisconnect() *DisconnectRequest {
	if x != nil {
		return x.Disconnect
	}
	return nil
}

func (x *Request) GetPubsub() *PSRequest {
	if x != nil {
		return x.Pubsub
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       *Response_Type     `protobuf:"varint,1,req,name=type,enum=p2pd.pb.Response_Type" json:"type,omitempty"`
	Error      *ErrorResponse     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	StreamInfo *StreamInfo        `protobuf:"bytes,3,opt,name=streamInfo" json:"streamInfo,omitempty"`
	Identify   *IdentifyResponse  `protobuf:"bytes,4,opt,name=identify" json:"identify,omitempty"`
	Dht        *DHTResponse       `protobuf:"bytes,5,opt,name=dht" json:"dht,omitempty"`
	Peers      []*PeerInfo        `protobuf:"bytes,6,rep,name=peers" json:"peers,omitempty"`
	Pubsub     *PSResponse        `protobuf:"bytes,7,opt,name=pubsub" json:"pubsub,omitempty"`
	Bandwidth  *BandwidthResponse `protobuf:"bytes,8,opt,name=bandwidth" json:"bandwidth,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetType() Response_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Response_OK
}

func (x *Response) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Response) GetStreamInfo() *StreamInfo {
	if x != nil {
		return x.StreamInfo
	}
	return nil
}

func (x *Response) GetIdentify() *IdentifyResponse {
	if x != nil {
		return x.Identify
	}
	return nil
}

func (x *Response) GetDht() *DHTResponse {
	if x != nil {
		return x.Dht
	}
	return nil
}

func (x *Response) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Response) GetPubsub() *PSResponse {
	if x != nil {
		return x.Pubsub
	}
	return nil
}

func (x *Response) GetBandwidth() *BandwidthResponse {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

type PersistentConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId []byte `protobuf:"bytes,1,req,name=callId" json:"callId,omitempty"`
	// Types that are assignable to Message:
	//	*PersistentConnectionRequest_AddUnaryHandler
	//	*PersistentConnectionRequest_RemoveUnaryHandler
	//	*PersistentConnectionRequest_CallUnary
	//	*PersistentConnectionRequest_UnaryResponse
	//	*PersistentConnectionRequest_Cancel
	Message isPersistentConnectionRequest_Message `protobuf_oneof:"message"`
}

func (x *PersistentConnectionRequest) Reset() {
	*x = PersistentConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentConnectionRequest) ProtoMessage() {}

func (x *PersistentConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentConnectionRequest.ProtoReflect.Descriptor instead.
func (*PersistentConnectionRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{2}
}

func (x *PersistentConnectionRequest) GetCallId() []byte {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (m *PersistentConnectionRequest) GetMessage() isPersistentConnectionRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PersistentConnectionRequest) GetAddUnaryHandler() *AddUnaryHandlerRequest {
	if x, ok := x.GetMessage().(*PersistentConnectionRequest_AddUnaryHandler); ok {
		return x.AddUnaryHandler
	}
	return nil
}

func (x *PersistentConnectionRequest) GetRemoveUnaryHandler() *RemoveUnaryHandlerRequest {
	if x, ok := x.GetMessage().(*PersistentConnectionRequest_RemoveUnaryHandler); ok {
		return x.RemoveUnaryHandler
	}
	return nil
}

func (x *PersistentConnectionRequest) GetCallUnary() *CallUnaryRequest {
	if x, ok := x.GetMessage().(*PersistentConnectionRequest_CallUnary); ok {
		return x.CallUnary
	}
	return nil
}

func (x *PersistentConnectionRequest) GetUnaryResponse() *CallUnaryResponse {
	if x, ok := x.GetMessage().(*PersistentConnectionRequest_UnaryResponse); ok {
		return x.UnaryResponse
	}
	return nil
}

func (x *PersistentConnectionRequest) GetCancel() *Cancel {
	if x, ok := x.GetMessage().(*PersistentConnectionRequest_Cancel); ok {
		return x.Cancel
	}
	return nil
}

type isPersistentConnectionRequest_Message interface {
	isPersistentConnectionRequest_Message()
}

type PersistentConnectionRequest_AddUnaryHandler struct {
	AddUnaryHandler *AddUnaryHandlerRequest `protobuf:"bytes,2,opt,name=addUnaryHandler,oneof"`
}

type PersistentConnectionRequest_RemoveUnaryHandler struct {
	RemoveUnaryHandler *RemoveUnaryHandlerRequest `protobuf:"bytes,6,opt,name=removeUnaryHandler,oneof"`
}

type PersistentConnectionRequest_CallUnary struct {
	CallUnary *CallUnaryRequest `protobuf:"bytes,3,opt,name=callUnary,oneof"`
}

type PersistentConnectionRequest_UnaryResponse struct {
	UnaryResponse *CallUnaryResponse `protobuf:"bytes,4,opt,name=unaryResponse,oneof"`
}

type PersistentConnectionRequest_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,5,opt,name=cancel,oneof"`
}

func (*PersistentConnectionRequest_AddUnaryHandler) isPersistentConnectionRequest_Message() {}

func (*PersistentConnectionRequest_RemoveUnaryHandler) isPersistentConnectionRequest_Message() {}

func (*PersistentConnectionRequest_CallUnary) isPersistentConnectionRequest_Message() {}

func (*PersistentConnectionRequest_UnaryResponse) isPersistentConnectionRequest_Message() {}

func (*PersistentConnectionRequest_Cancel) isPersistentConnectionRequest_Message() {}

type BandwidthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *int64 `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
}

func (x *BandwidthResponse) Reset() {
	*x = BandwidthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BandwidthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandwidthResponse) ProtoMessage() {}

func (x *BandwidthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandwidthResponse.ProtoReflect.Descriptor instead.
func (*BandwidthResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{3}
}

func (x *BandwidthResponse) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type PersistentConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId []byte `protobuf:"bytes,1,req,name=callId" json:"callId,omitempty"`
	// Types that are assignable to Message:
	//	*PersistentConnectionResponse_CallUnaryResponse
	//	*PersistentConnectionResponse_RequestHandling
	//	*PersistentConnectionResponse_DaemonError
	//	*PersistentConnectionResponse_Cancel
	Message isPersistentConnectionResponse_Message `protobuf_oneof:"message"`
}

func (x *PersistentConnectionResponse) Reset() {
	*x = PersistentConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentConnectionResponse) ProtoMessage() {}

func (x *PersistentConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentConnectionResponse.ProtoReflect.Descriptor instead.
func (*PersistentConnectionResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{4}
}

func (x *PersistentConnectionResponse) GetCallId() []byte {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (m *PersistentConnectionResponse) GetMessage() isPersistentConnectionResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PersistentConnectionResponse) GetCallUnaryResponse() *CallUnaryResponse {
	if x, ok := x.GetMessage().(*PersistentConnectionResponse_CallUnaryResponse); ok {
		return x.CallUnaryResponse
	}
	return nil
}

func (x *PersistentConnectionResponse) GetRequestHandling() *CallUnaryRequest {
	if x, ok := x.GetMessage().(*PersistentConnectionResponse_RequestHandling); ok {
		return x.RequestHandling
	}
	return nil
}

func (x *PersistentConnectionResponse) GetDaemonError() *DaemonError {
	if x, ok := x.GetMessage().(*PersistentConnectionResponse_DaemonError); ok {
		return x.DaemonError
	}
	return nil
}

func (x *PersistentConnectionResponse) GetCancel() *Cancel {
	if x, ok := x.GetMessage().(*PersistentConnectionResponse_Cancel); ok {
		return x.Cancel
	}
	return nil
}

type isPersistentConnectionResponse_Message interface {
	isPersistentConnectionResponse_Message()
}

type PersistentConnectionResponse_CallUnaryResponse struct {
	CallUnaryResponse *CallUnaryResponse `protobuf:"bytes,2,opt,name=callUnaryResponse,oneof"`
}

type PersistentConnectionResponse_RequestHandling struct {
	RequestHandling *CallUnaryRequest `protobuf:"bytes,3,opt,name=requestHandling,oneof"`
}

type PersistentConnectionResponse_DaemonError struct {
	DaemonError *DaemonError `protobuf:"bytes,4,opt,name=daemonError,oneof"`
}

type PersistentConnectionResponse_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,5,opt,name=cancel,oneof"`
}

func (*PersistentConnectionResponse_CallUnaryResponse) isPersistentConnectionResponse_Message() {}

func (*PersistentConnectionResponse_RequestHandling) isPersistentConnectionResponse_Message() {}

func (*PersistentConnectionResponse_DaemonError) isPersistentConnectionResponse_Message() {}

func (*PersistentConnectionResponse_Cancel) isPersistentConnectionResponse_Message() {}

type IdentifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (x *IdentifyResponse) Reset() {
	*x = IdentifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifyResponse) ProtoMessage() {}

func (x *IdentifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifyResponse.ProtoReflect.Descriptor instead.
func (*IdentifyResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{5}
}

func (x *IdentifyResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IdentifyResponse) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer    []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Addrs   [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Timeout *int64   `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ConnectRequest) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *ConnectRequest) GetTimeout() int64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type StreamOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer    []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Proto   []string `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
	Timeout *int64   `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
}

func (x *StreamOpenRequest) Reset() {
	*x = StreamOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOpenRequest) ProtoMessage() {}

func (x *StreamOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOpenRequest.ProtoReflect.Descriptor instead.
func (*StreamOpenRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{7}
}

func (x *StreamOpenRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *StreamOpenRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *StreamOpenRequest) GetTimeout() int64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type StreamHandlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     []byte   `protobuf:"bytes,1,req,name=addr" json:"addr,omitempty"`
	Proto    []string `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
	Balanced *bool    `protobuf:"varint,3,req,name=balanced" json:"balanced,omitempty"`
}

func (x *StreamHandlerRequest) Reset() {
	*x = StreamHandlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamHandlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamHandlerRequest) ProtoMessage() {}

func (x *StreamHandlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamHandlerRequest.ProtoReflect.Descriptor instead.
func (*StreamHandlerRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{8}
}

func (x *StreamHandlerRequest) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *StreamHandlerRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

func (x *StreamHandlerRequest) GetBalanced() bool {
	if x != nil && x.Balanced != nil {
		return *x.Balanced
	}
	return false
}

type RemoveStreamHandlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  []byte   `protobuf:"bytes,1,req,name=addr" json:"addr,omitempty"`
	Proto []string `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
}

func (x *RemoveStreamHandlerRequest) Reset() {
	*x = RemoveStreamHandlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveStreamHandlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamHandlerRequest) ProtoMessage() {}

func (x *RemoveStreamHandlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamHandlerRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamHandlerRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveStreamHandlerRequest) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *RemoveStreamHandlerRequest) GetProto() []string {
	if x != nil {
		return x.Proto
	}
	return nil
}

type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *string `protobuf:"bytes,1,req,name=msg" json:"msg,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{10}
}

func (x *ErrorResponse) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer  []byte  `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Addr  []byte  `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	Proto *string `protobuf:"bytes,3,req,name=proto" json:"proto,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{11}
}

func (x *StreamInfo) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *StreamInfo) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *StreamInfo) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

type DHTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *DHTRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.DHTRequest_Type" json:"type,omitempty"`
	Peer    []byte           `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Cid     []byte           `protobuf:"bytes,3,opt,name=cid" json:"cid,omitempty"`
	Key     []byte           `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Value   []byte           `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	Count   *int32           `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Timeout *int64           `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
}

func (x *DHTRequest) Reset() {
	*x = DHTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHTRequest) ProtoMessage() {}

func (x *DHTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHTRequest.ProtoReflect.Descriptor instead.
func (*DHTRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{12}
}

func (x *DHTRequest) GetType() DHTRequest_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DHTRequest_FIND_PEER
}

func (x *DHTRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *DHTRequest) GetCid() []byte {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *DHTRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DHTRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DHTRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *DHTRequest) GetTimeout() int64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type DHTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *DHTResponse_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.DHTResponse_Type" json:"type,omitempty"`
	Peer  *PeerInfo         `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Value []byte            `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *DHTResponse) Reset() {
	*x = DHTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHTResponse) ProtoMessage() {}

func (x *DHTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHTResponse.ProtoReflect.Descriptor instead.
func (*DHTResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{13}
}

func (x *DHTResponse) GetType() DHTResponse_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DHTResponse_BEGIN
}

func (x *DHTResponse) GetPeer() *PeerInfo {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *DHTResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addrs [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{14}
}

func (x *PeerInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PeerInfo) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type ConnManagerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *ConnManagerRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.ConnManagerRequest_Type" json:"type,omitempty"`
	Peer   []byte                   `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Tag    *string                  `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Weight *int64                   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
}

func (x *ConnManagerRequest) Reset() {
	*x = ConnManagerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnManagerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnManagerRequest) ProtoMessage() {}

func (x *ConnManagerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnManagerRequest.ProtoReflect.Descriptor instead.
func (*ConnManagerRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{15}
}

func (x *ConnManagerRequest) GetType() ConnManagerRequest_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConnManagerRequest_TAG_PEER
}

func (x *ConnManagerRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ConnManagerRequest) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *ConnManagerRequest) GetWeight() int64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer []byte `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{16}
}

func (x *DisconnectRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

type PSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *PSRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.PSRequest_Type" json:"type,omitempty"`
	Topic *string         `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Data  []byte          `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *PSRequest) Reset() {
	*x = PSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSRequest) ProtoMessage() {}

func (x *PSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSRequest.ProtoReflect.Descriptor instead.
func (*PSRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{17}
}

func (x *PSRequest) GetType() PSRequest_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PSRequest_GET_TOPICS
}

func (x *PSRequest) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *PSRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PSMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      []byte   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Data      []byte   `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Seqno     []byte   `protobuf:"bytes,3,opt,name=seqno" json:"seqno,omitempty"`
	TopicIDs  []string `protobuf:"bytes,4,rep,name=topicIDs" json:"topicIDs,omitempty"`
	Signature []byte   `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	Key       []byte   `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
}

func (x *PSMessage) Reset() {
	*x = PSMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSMessage) ProtoMessage() {}

func (x *PSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSMessage.ProtoReflect.Descriptor instead.
func (*PSMessage) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{18}
}

func (x *PSMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PSMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PSMessage) GetSeqno() []byte {
	if x != nil {
		return x.Seqno
	}
	return nil
}

func (x *PSMessage) GetTopicIDs() []string {
	if x != nil {
		return x.TopicIDs
	}
	return nil
}

func (x *PSMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PSMessage) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type PSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics  []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	PeerIDs [][]byte `protobuf:"bytes,2,rep,name=peerIDs" json:"peerIDs,omitempty"`
}

func (x *PSResponse) Reset() {
	*x = PSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSResponse) ProtoMessage() {}

func (x *PSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSResponse.ProtoReflect.Descriptor instead.
func (*PSResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{19}
}

func (x *PSResponse) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *PSResponse) GetPeerIDs() [][]byte {
	if x != nil {
		return x.PeerIDs
	}
	return nil
}

type CallUnaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer  []byte  `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Proto *string `protobuf:"bytes,2,req,name=proto" json:"proto,omitempty"`
	Data  []byte  `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *CallUnaryRequest) Reset() {
	*x = CallUnaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallUnaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUnaryRequest) ProtoMessage() {}

func (x *CallUnaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUnaryRequest.ProtoReflect.Descriptor instead.
func (*CallUnaryRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{20}
}

func (x *CallUnaryRequest) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *CallUnaryRequest) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

func (x *CallUnaryRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CallUnaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*CallUnaryResponse_Response
	//	*CallUnaryResponse_Error
	Result isCallUnaryResponse_Result `protobuf_oneof:"result"`
}

func (x *CallUnaryResponse) Reset() {
	*x = CallUnaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallUnaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallUnaryResponse) ProtoMessage() {}

func (x *CallUnaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallUnaryResponse.ProtoReflect.Descriptor instead.
func (*CallUnaryResponse) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{21}
}

func (m *CallUnaryResponse) GetResult() isCallUnaryResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CallUnaryResponse) GetResponse() []byte {
	if x, ok := x.GetResult().(*CallUnaryResponse_Response); ok {
		return x.Response
	}
	return nil
}

func (x *CallUnaryResponse) GetError() []byte {
	if x, ok := x.GetResult().(*CallUnaryResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isCallUnaryResponse_Result interface {
	isCallUnaryResponse_Result()
}

type CallUnaryResponse_Response struct {
	Response []byte `protobuf:"bytes,1,opt,name=response,oneof"`
}

type CallUnaryResponse_Error struct {
	Error []byte `protobuf:"bytes,2,opt,name=error,oneof"`
}

func (*CallUnaryResponse_Response) isCallUnaryResponse_Result() {}

func (*CallUnaryResponse_Error) isCallUnaryResponse_Result() {}

type AddUnaryHandlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto    *string `protobuf:"bytes,1,req,name=proto" json:"proto,omitempty"`
	Balanced *bool   `protobuf:"varint,2,req,name=balanced" json:"balanced,omitempty"`
}

func (x *AddUnaryHandlerRequest) Reset() {
	*x = AddUnaryHandlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUnaryHandlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUnaryHandlerRequest) ProtoMessage() {}

func (x *AddUnaryHandlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUnaryHandlerRequest.ProtoReflect.Descriptor instead.
func (*AddUnaryHandlerRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{22}
}

func (x *AddUnaryHandlerRequest) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

func (x *AddUnaryHandlerRequest) GetBalanced() bool {
	if x != nil && x.Balanced != nil {
		return *x.Balanced
	}
	return false
}

type RemoveUnaryHandlerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto *string `protobuf:"bytes,1,req,name=proto" json:"proto,omitempty"`
}

func (x *RemoveUnaryHandlerRequest) Reset() {
	*x = RemoveUnaryHandlerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUnaryHandlerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUnaryHandlerRequest) ProtoMessage() {}

func (x *RemoveUnaryHandlerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUnaryHandlerRequest.ProtoReflect.Descriptor instead.
func (*RemoveUnaryHandlerRequest) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{23}
}

func (x *RemoveUnaryHandlerRequest) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

type DaemonError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (x *DaemonError) Reset() {
	*x = DaemonError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonError) ProtoMessage() {}

func (x *DaemonError) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonError.ProtoReflect.Descriptor instead.
func (*DaemonError) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{24}
}

func (x *DaemonError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Cancel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Cancel) Reset() {
	*x = Cancel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2pd_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cancel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cancel) ProtoMessage() {}

func (x *Cancel) ProtoReflect() protoreflect.Message {
	mi := &file_p2pd_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cancel.ProtoReflect.Descriptor instead.
func (*Cancel) Descriptor() ([]byte, []int) {
	return file_p2pd_proto_rawDescGZIP(), []int{25}
}

var File_p2pd_proto protoreflect.FileDescriptor

var file_p2pd_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x32,
	0x70, 0x64, 0x2e, 0x70, 0x62, 0x22, 0xe8, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x03, 0x64, 0x68, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x48, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x64, 0x68, 0x74, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x32, 0x70, 0x64,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x22, 0xd8, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x48, 0x54,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x4e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x53, 0x55, 0x42, 0x10, 0x08, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0b,
	0x22, 0xa3, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x32,
	0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32,
	0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x26, 0x0a, 0x03, 0x64, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x64, 0x68, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x32, 0x70,
	0x64, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x19, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x1b, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4b,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0d,
	0x75, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x61,
	0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a,
	0x0b, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a,
	0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x57, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x4a, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x02, 0x0a, 0x0a,
	0x44, 0x48, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45,
	0x52, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x10, 0x08, 0x22, 0xa0, 0x01, 0x0a,
	0x0b, 0x44, 0x48, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x32, 0x70,
	0x64, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x32, 0x70, 0x64,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x22,
	0x30, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2e, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x49, 0x4d, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x11,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x09, 0x50, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x03, 0x22, 0x95,
	0x01, 0x0a, 0x09, 0x50, 0x53, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x0a, 0x50, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x50, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x19, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0b,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x08, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x09, 0x5a, 0x07, 0x70, 0x32, 0x70, 0x64, 0x2e, 0x70, 0x62,
}

var (
	file_p2pd_proto_rawDescOnce sync.Once
	file_p2pd_proto_rawDescData = file_p2pd_proto_rawDesc
)

func file_p2pd_proto_rawDescGZIP() []byte {
	file_p2pd_proto_rawDescOnce.Do(func() {
		file_p2pd_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2pd_proto_rawDescData)
	})
	return file_p2pd_proto_rawDescData
}

var file_p2pd_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_p2pd_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_p2pd_proto_goTypes = []interface{}{
	(Request_Type)(0),                    // 0: p2pd.pb.Request.Type
	(Response_Type)(0),                   // 1: p2pd.pb.Response.Type
	(DHTRequest_Type)(0),                 // 2: p2pd.pb.DHTRequest.Type
	(DHTResponse_Type)(0),                // 3: p2pd.pb.DHTResponse.Type
	(ConnManagerRequest_Type)(0),         // 4: p2pd.pb.ConnManagerRequest.Type
	(PSRequest_Type)(0),                  // 5: p2pd.pb.PSRequest.Type
	(*Request)(nil),                      // 6: p2pd.pb.Request
	(*Response)(nil),                     // 7: p2pd.pb.Response
	(*PersistentConnectionRequest)(nil),  // 8: p2pd.pb.PersistentConnectionRequest
	(*BandwidthResponse)(nil),            // 9: p2pd.pb.BandwidthResponse
	(*PersistentConnectionResponse)(nil), // 10: p2pd.pb.PersistentConnectionResponse
	(*IdentifyResponse)(nil),             // 11: p2pd.pb.IdentifyResponse
	(*ConnectRequest)(nil),               // 12: p2pd.pb.ConnectRequest
	(*StreamOpenRequest)(nil),            // 13: p2pd.pb.StreamOpenRequest
	(*StreamHandlerRequest)(nil),         // 14: p2pd.pb.StreamHandlerRequest
	(*RemoveStreamHandlerRequest)(nil),   // 15: p2pd.pb.RemoveStreamHandlerRequest
	(*ErrorResponse)(nil),                // 16: p2pd.pb.ErrorResponse
	(*StreamInfo)(nil),                   // 17: p2pd.pb.StreamInfo
	(*DHTRequest)(nil),                   // 18: p2pd.pb.DHTRequest
	(*DHTResponse)(nil),                  // 19: p2pd.pb.DHTResponse
	(*PeerInfo)(nil),                     // 20: p2pd.pb.PeerInfo
	(*ConnManagerRequest)(nil),           // 21: p2pd.pb.ConnManagerRequest
	(*DisconnectRequest)(nil),            // 22: p2pd.pb.DisconnectRequest
	(*PSRequest)(nil),                    // 23: p2pd.pb.PSRequest
	(*PSMessage)(nil),                    // 24: p2pd.pb.PSMessage
	(*PSResponse)(nil),                   // 25: p2pd.pb.PSResponse
	(*CallUnaryRequest)(nil),             // 26: p2pd.pb.CallUnaryRequest
	(*CallUnaryResponse)(nil),            // 27: p2pd.pb.CallUnaryResponse
	(*AddUnaryHandlerRequest)(nil),       // 28: p2pd.pb.AddUnaryHandlerRequest
	(*RemoveUnaryHandlerRequest)(nil),    // 29: p2pd.pb.RemoveUnaryHandlerRequest
	(*DaemonError)(nil),                  // 30: p2pd.pb.DaemonError
	(*Cancel)(nil),                       // 31: p2pd.pb.Cancel
}
var file_p2pd_proto_depIdxs = []int32{
	0,  // 0: p2pd.pb.Request.type:type_name -> p2pd.pb.Request.Type
	12, // 1: p2pd.pb.Request.connect:type_name -> p2pd.pb.ConnectRequest
	13, // 2: p2pd.pb.Request.streamOpen:type_name -> p2pd.pb.StreamOpenRequest
	14, // 3: p2pd.pb.Request.streamHandler:type_name -> p2pd.pb.StreamHandlerRequest
	15, // 4: p2pd.pb.Request.removeStreamHandler:type_name -> p2pd.pb.RemoveStreamHandlerRequest
	18, // 5: p2pd.pb.Request.dht:type_name -> p2pd.pb.DHTRequest
	21, // 6: p2pd.pb.Request.connManager:type_name -> p2pd.pb.ConnManagerRequest
	22, // 7: p2pd.pb.Request.disconnect:type_name -> p2pd.pb.DisconnectRequest
	23, // 8: p2pd.pb.Request.pubsub:type_name -> p2pd.pb.PSRequest
	1,  // 9: p2pd.pb.Response.type:type_name -> p2pd.pb.Response.Type
	16, // 10: p2pd.pb.Response.error:type_name -> p2pd.pb.ErrorResponse
	17, // 11: p2pd.pb.Response.streamInfo:type_name -> p2pd.pb.StreamInfo
	11, // 12: p2pd.pb.Response.identify:type_name -> p2pd.pb.IdentifyResponse
	19, // 13: p2pd.pb.Response.dht:type_name -> p2pd.pb.DHTResponse
	20, // 14: p2pd.pb.Response.peers:type_name -> p2pd.pb.PeerInfo
	25, // 15: p2pd.pb.Response.pubsub:type_name -> p2pd.pb.PSResponse
	9,  // 16: p2pd.pb.Response.bandwidth:type_name -> p2pd.pb.BandwidthResponse
	28, // 17: p2pd.pb.PersistentConnectionRequest.addUnaryHandler:type_name -> p2pd.pb.AddUnaryHandlerRequest
	29, // 18: p2pd.pb.PersistentConnectionRequest.removeUnaryHandler:type_name -> p2pd.pb.RemoveUnaryHandlerRequest
	26, // 19: p2pd.pb.PersistentConnectionRequest.callUnary:type_name -> p2pd.pb.CallUnaryRequest
	27, // 20: p2pd.pb.PersistentConnectionRequest.unaryResponse:type_name -> p2pd.pb.CallUnaryResponse
	31, // 21: p2pd.pb.PersistentConnectionRequest.cancel:type_name -> p2pd.pb.Cancel
	27, // 22: p2pd.pb.PersistentConnectionResponse.callUnaryResponse:type_name -> p2pd.pb.CallUnaryResponse
	26, // 23: p2pd.pb.PersistentConnectionResponse.requestHandling:type_name -> p2pd.pb.CallUnaryRequest
	30, // 24: p2pd.pb.PersistentConnectionResponse.daemonError:type_name -> p2pd.pb.DaemonError
	31, // 25: p2pd.pb.PersistentConnectionResponse.cancel:type_name -> p2pd.pb.Cancel
	2,  // 26: p2pd.pb.DHTRequest.type:type_name -> p2pd.pb.DHTRequest.Type
	3,  // 27: p2pd.pb.DHTResponse.type:type_name -> p2pd.pb.DHTResponse.Type
	20, // 28: p2pd.pb.DHTResponse.peer:type_name -> p2pd.pb.PeerInfo
	4,  // 29: p2pd.pb.ConnManagerRequest.type:type_name -> p2pd.pb.ConnManagerRequest.Type
	5,  // 30: p2pd.pb.PSRequest.type:type_name -> p2pd.pb.PSRequest.Type
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_p2pd_proto_init() }
func file_p2pd_proto_init() {
	if File_p2pd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_p2pd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BandwidthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamHandlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveStreamHandlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnManagerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallUnaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallUnaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUnaryHandlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUnaryHandlerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2pd_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cancel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_p2pd_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PersistentConnectionRequest_AddUnaryHandler)(nil),
		(*PersistentConnectionRequest_RemoveUnaryHandler)(nil),
		(*PersistentConnectionRequest_CallUnary)(nil),
		(*PersistentConnectionRequest_UnaryResponse)(nil),
		(*PersistentConnectionRequest_Cancel)(nil),
	}
	file_p2pd_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PersistentConnectionResponse_CallUnaryResponse)(nil),
		(*PersistentConnectionResponse_RequestHandling)(nil),
		(*PersistentConnectionResponse_DaemonError)(nil),
		(*PersistentConnectionResponse_Cancel)(nil),
	}
	file_p2pd_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*CallUnaryResponse_Response)(nil),
		(*CallUnaryResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2pd_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2pd_proto_goTypes,
		DependencyIndexes: file_p2pd_proto_depIdxs,
		EnumInfos:         file_p2pd_proto_enumTypes,
		MessageInfos:      file_p2pd_proto_msgTypes,
	}.Build()
	File_p2pd_proto = out.File
	file_p2pd_proto_rawDesc = nil
	file_p2pd_proto_goTypes = nil
	file_p2pd_proto_depIdxs = nil
}
